{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robo","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","border","children","App","state","fetch","then","response","json","users","setState","this","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,+DACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCE1BW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,OAAQ,oBAChBF,EAAMG,WCgBbC,G,wDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXhB,OAAQ,IAHE,E,gEAOO,IAAD,OAClBiB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAIA,EAAMpB,KAAI,WAUvB,OATIoB,EAAM,KACRA,EAAM,GAAG1B,GAAK,QAEZ0B,EAAM,KACRA,EAAM,GAAG1B,GAAK,QAEZ0B,EAAM,KACRA,EAAM,GAAG1B,GAAK,OAET,EAAK2B,SAAS,CAAEtB,OAAQqB,Y,+BAI3B,IACArB,EAAWuB,KAAKP,MAAhBhB,OADD,EAEiCuB,KAAKZ,MAArCa,EAFD,EAECA,YAAaC,EAFd,EAEcA,eAEfC,EAAiB1B,EAAO2B,QAAO,SAAAC,GACnC,OAAOA,EAAMnC,KAAKoC,cAAcC,SAASN,EAAYK,kBAGvD,OAAQ7B,EAAO+B,OAGX,yBAAKnC,UAAU,MACb,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWU,aAAcmB,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQ0B,MANxB,2C,GAlCYM,cA+CHC,eA3DS,SAAAjB,GACtB,MAAO,CACLQ,YAAaR,EAAMQ,gBAII,SAAAU,GACzB,MAAO,CACLT,eAAgB,SAACU,GAAD,OAAWD,ECfU,CACvC3B,KCHiC,sBDIjC6B,QDaqDD,EAAME,OAAOC,YAmDrDL,CAA6ClB,GGxDxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CACnBpB,YAAa,ICOTqB,G,MAAQC,aDJc,WAAoC,IAAnC9B,EAAkC,uDAA5B4B,EAAcG,EAAc,uDAAP,GACtD,OAAQA,EAAOxC,MACb,IFR+B,sBES7B,OAAO,2BAAKS,GAAZ,IAAmBQ,YAAYuB,EAAOX,UACxC,QACE,OAAOpB,OCCbgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.71a9e779.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 pointer'>\n      <img alt='robots' src={`https://robohash.org/${id}.png?set=set4`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n            robots.map((robo, i) => {\n                return (\n                    <Card \n                        key={i} \n                        id={robots[i].id} \n                        name={robots[i].name} \n                        email={robots[i].email}\n                    />\n                );\n            })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search for robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{border: '1px solid black'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchField\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => users.map(() => {\n        if (users[0]) {\n          users[0].id = '4555';\n        }\n        if (users[3]) {\n          users[3].id = '6589';\n        } \n        if (users[9]) {\n          users[9].id = '073';\n        }\n        return this.setState({ robots: users})\n      }));\n  }\n\n  render() {\n    const { robots } = this.state;\n    const { searchField, onSearchChange } = this.props;\n\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>CatFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants';\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField:action.payload };\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots } from './reducers';\nimport 'tachyons';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}